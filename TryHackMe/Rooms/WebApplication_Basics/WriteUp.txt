Introduction

Learning Objectives
By completing this room, you will:
1. Understand what a web application is and how it runs in a web browser.
2. Break down the components of a URL and see how it helps access web resources.
3. Learn how HTTP requests and responses work.
4. Get familiar with the different types of HTTP request methods.
5. Understand what different HTTP response codes mean.
6. Check out how HTTP headers work and why they matter for security.


Web Application Overview

web browser to explore or browse a web application.
Various components that make up a web application:
Front End: A web application would have a user interact with it and use a number of technologies such as HTML, CSS, and JavaScript to do this.
    1. HTML: HTML (Hypertext Markup Language) is a foundational aspect of web applications. It is a set of instructions or code that instructs a web browser on what to display and how to display it.
    2. CSS: CSS (Cascading Style Sheets) in web applications describes a standard appearance, such as certain colours, types of text, and layouts. 
    3. JS: JS (JavaScript) is part of a web application front end that enables more complex activity in the web browser. Whereas HTML can be considered a simple set of instructions on what to display, JavaScript is a more advanced set of instructions that allows choices and decisions to be made on what to display.

Back End: The Back End of a web application is things you don’t see within a web browser but are important for the web application to work.
    1. DB:  Database is where information can be stored, modified, and retrieved. A web application may want to store and retrieve information about a visitor's preferences on what to show or not; this would be stored in a database. 
    2. Infrastructure: Infrastructure components underpinning Web Applications, such as web servers, application servers, storage, various networking devices, and other software that support the web application.
    3. WAF: WAF (Web Application Firewall) is an optional component for web applications. It helps filter out dangerous requests away from the Web Server and provides an element of protection.

Summary
There are many components involved in delivering a web application. Front End components like HTML, CSS, and JavaScript focus on the experience inside the browser. Back End components such as the Web Server, Database, or WAF are the engine under the surface that enable the web application to function. 

Question 1: Which component on a computer is responsible for hosting and delivering content for web applications?
Answer: web server

Question 2: Which tool is used to access and interact with web applications?
Answer: web browser

Question 3: Which component acts as a protective layer, filtering incoming traffic to block malicious attacks, and ensuring the security of the the web application?
Answer: web application firewall


Uniform Resource Locator

Uniform Resource Locator: A Uniform Resource Locator (URL) is a web address that lets you access all kinds of online content—whether it’s a webpage, a video, a photo, or other media. It guides your browser to the right place on the Internet.

Anatomy of a URL(http://username:password@tryhackme.com:80/view-room?id=1#task)
Scheme: http://
User: username:password
Host/Domain: tryhackme.com 
Port: 80
Path: view-room 
Query String: ?id=1
Fragment: #task

URL as being made up of several parts, each playing a different role in helping you find the right resource. Understanding how these parts fit together is important for browsing the web, developing web applications, and even troubleshooting problems.
breakdown of the key components: 
Scheme: The scheme is the protocol used to access the website. The most common are HTTP (HyperText Transfer Protocol) and HTTPS (Hypertext Transfer Protocol Secure). HTTPS is more secure because it encrypts the connection, which is why browsers and cyber security experts recommend it. Websites often enforce HTTPS for added protection.
User: Some URLs can include a user’s login details (usually a username) for sites that require authentication. This happens mostly in URLs that need credentials to access certain resources. However, it’s rare nowadays because putting login details in the URL isn’t very safe—it can expose sensitive information, which is a security risk.
Host/Domain: The host or domain is the most important part of the URL because it tells you which website you’re accessing. Every domain name has to be unique and is registered through domain registrars. From a security standpoint, look for domain names that appear almost like real ones but have small differences (this is called typosquatting). These fake domains are often used in phishing attacks to trick people into giving up sensitive info.
Port: The port number helps direct your browser to the right service on the web server. It’s like telling the server which doorway to use for communication. Port numbers range from 1 to 65,535, but the most common are 80 for HTTP and 443 for HTTPS.
Path: The path points to the specific file or page on the server that you’re trying to access. It’s like a roadmap that shows the browser where to go. Websites need to secure these paths to make sure only authorised users can access sensitive resources.
Query String: The query string is the part of the URL that starts with a question mark (?). It’s often used for things like search terms or form inputs. Since users can modify these query strings, it’s important to handle them securely to prevent attacks like injections, where malicious code could be added.
Fragment: The fragment starts with a hash symbol (#) and helps point to a specific section of a webpage—like jumping directly to a particular heading or table. Users can modify this too, so like with query strings, it’s important to check and clean up any data here to avoid issues like injection attacks.

Question 4: Which protocol provides encrypted communication to ensure secure data transmission between a web browser and a web server?
Answer: HTTPS

Question 5: What term describes the practice of registering domain names that are misspelt variations of popular websites to exploit user errors and potentially engage in fraudulent activities?
Answer: Typosquatting

Question 6: What part of a URL is used to pass additional information, such as search terms or form inputs, to the web server?
Answer: Query String


HTTP Messages

HTTP messages are packets of data exchanged between a user (the client) and the web server. 

There are two types of HTTP messages:
HTTP Requests: Sent by the user to trigger actions on the web application.
HTTP Responses: Sent by the server in response to the user’s request.

Each message follows a specific format that helps both the user and the server communicate smoothly:
Start Line: Its introduction of the message, Tells what sort of message is being sent(user/server). Also mentions how this request needs to handled by the server.
Headers: Made up of key-value pair that provides additional details on the HTTP msg. They give instruction to both server and client to handle request and response. Covers many things like security, content types, and more which helps in smooth communication.
Empty line: Divider that separates header from body. Without it client and server might misinterpret data sent/received causing errors.
Body: Actual data is stored/present.  In a request, the body might include data the user wants to send to the server (like form data). In a response, it’s where the server puts the content that the user requested (like a webpage or API data).

Why Understanding HTTP Messages Matters?
1. These messages are the foundation of how web applications communicate. If they’re structured properly, everything works smoothly.
2. Knowing how they work will help you diagnose issues in web communication, which means better performance and reliability for your web application.
3. It’s also crucial for security. Understanding HTTP messages helps you implement strong security measures to protect data during transmission.

Question 7: Which HTTP message is returned by the web server after processing a client's request?
Answer: HTTP response

Question 8: What follows the headers in an HTTP message?
Answer: Empty Line


HTTP Request: Request Line and Methods

HTTP request is what a user sends to a web server to interact with a web application and make something happen. Since these requests are often the first point of contact between the user and the web server, knowing how they work is super important—especially if you’re into cyber security.

Request Line: The request line (or start line) is the first part of an HTTP request and tells the server what kind of request it’s dealing with. It has three main parts: the HTTP method, the URL path, and the HTTP version.
Structure: METHOD /path HTTP/version

HTTP Methods: The HTTP method tells the server what action the user wants to perform on the resource identified by the URL path.

some of the most common methods and their possible security issue:
1. GET: Used to fetch data from the server without making any changes. Risk: Avoid putting sensitive info like tokens or passwords in GET requests since they can show up as plaintext.
2. POST: Sends data to the server, usually to create or update something. Risk: Always validate and clean the input to avoid attacks like SQL injection or XSS.
3. PUT: Replaces or updates something on the server. Risk: Make sure the user is authorised to make changes before accepting the request.
4. DELETE: Removes something from the server. Risk:  make sure only authorised users can delete resources.
5. PATCH: Updates part of a resource. It’s useful for making small changes without replacing the whole thing. Risk: always validate the data to avoid inconsistencies.
6. HEAD: Works like GET but only retrieves headers, not the full content. It’s handy for checking metadata without downloading the full response.
7. OPTIONS: Tells you what methods are available for a specific resource, helping clients understand what they can do with the server.
8. TRACE: Similar to OPTIONS, it shows which methods are allowed, often for debugging. Many servers disable it for security reasons.
9. CONNECT: Used to create a secure connection, like for HTTPS. It’s not as common but is critical for encrypted communication.

Note:  PATCH requests should be validated to avoid inconsistencies, and OPTIONS and TRACE should be turned off if not needed to avoid possible security risks.

URL Path: The URL path tells the server where to find the resource the user is asking for.
Ex: api/users/jondoe

Attackers often try to manipulate the URL path to exploit vulnerabilities, so it’s crucial to:
1. Validate the URL path to prevent unauthorised access
2. Sanitise the path to avoid injection attacks
3. Protect sensitive data by conducting privacy and risk assessments

HTTP version: The HTTP version shows the protocol version used to communicate between the client and server.
Few common ones are as follows:
1. HTTP/0.9 (1991): The first version, only supported GET requests.
2. HTTP/1.0 (1996): Added headers and better support for different types of content, improving caching.
3. HTTP/1.1 (1997): Brought persistent connections, chunked transfer encoding, and better caching. It’s still widely used today.
4. HTTP/2 (2015): Introduced features like multiplexing, header compression, and prioritisation for faster performance.
5. HTTP/3 (2022): Built on HTTP/2, but uses a new protocol (QUIC) for quicker and more secure connections.

Note: upgrading to HTTP/2 or HTTP/3 can provide significant performance and security improvements as more systems adopt them.

Question 9: Which HTTP protocol version became widely adopted and remains the most commonly used version for web communication, known for introducing features like persistent connections and chunked transfer encoding?
Answer: HTTP/1.1

Question 10: Which HTTP request method describes the communication options for the target resource, allowing clients to determine which HTTP methods are supported by the web server?
Answer: OPTIONS

Question 11: In an HTTP request, which component specifies the specific resource or endpoint on the web server that the client is requesting, typically appearing after the domain name in the URL?
Answer: URL path 


HTTP Request: Headers and Body

Request Headers: Request Headers allow extra information to be conveyed to the web server about the request. 

Common request headers are as follows:
1. Host: Specifies the name of the web server the request is for. Usage: Host: <Domain>
2. User-Agent: Shares information about the web browser the request is coming from. Usage: User-Agent: <Browser Info>
3. Referer: Indicates the URL from which the request came from. Usage: Referer: <URL>
4. Cookie: Information the web server previously asked the web browser to store is held in cookies. Usage: Cookie: <Cookie details>
5. Content-Type: Describes what type or format of data is in the request. Usage: Content-Type: <Data Rep>

Request Body: HTTP requests such as POST and PUT, where data is sent to the web server the data is located inside the HTTP Request Body.The formatting of the data can take many forms, but some common ones are URL Encoded, Form Data, JSON, or XML.

Different data formats are:
1. URL Encoded (application/x-www-form-urlencoded): A format where data is structured in pairs of key and value where (key=value). Multiple pairs are separated by an (&) symbol, such as key1=value1&key2=value2. Special characters are percent-encoded.
Example: user=Jack&passwrd=Password1

2. Form Data (multipart/form-data): Allows multiple data blocks to be sent where each block is separated by a boundary string. The boundary string is the defined header of the request itself. This type of formatting can be used to send binary data, such as when uploading files or images to a web server.
Example: 
----WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="username"

aleksandra
----WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="profile_pic"; filename="aleksandra.jpg"
Content-Type: image/jpeg

[Binary Data Here representing the image]
----WebKitFormBoundary7MA4YWxkTrZu0gW--

3. JSON (application/json): The data can be sent using the JSON (JavaScript Object Notation) structure. Data is formatted in pairs of name : value. Multiple pairs are separated by commas, all contained within curly braces { }.
Example:
{
    "name": "Aleksandra",
    "age": 27,
    "country": "US"
}

4. XML (application/xml): In XML formatting, data is structured inside labels called tags, which have an opening and closing. These labels can be nested within each other.
Example: 
<user>
    <name>Aleksandra</name>
    <age>27</age>
    <country>US</country>
</user>

Question 12: Which HTTP request header specifies the domain name of the web server to which the request is being sent?
Answer: Host 

Question 13: What is the default content type for form submissions in an HTTP request where the data is encoded as key=value pairs in a query string format?
Answer: application/x-www-form-urlencoded

Question 14: Which part of an HTTP request contains additional information like host, user agent, and content type, guiding how the web server should process the request?
Answer: Request Headers


HTTP Response: Status Line and Status Codes

The server sends back an HTTP response to let you know whether your request was successful or something went wrong. These responses include a status code and a short explanation (called the Reason Phrase) that gives insight into how the server handled requests.

Status Line: 
The first line in every HTTP response is called the Status Line. It gives you three key pieces of info:
1. HTTP Version: This tells you which version of HTTP is being used.
2. Status Code: A three-digit number showing the outcome of your request.
3. Reason Phrase: A short message explaining the status code in human-readable terms.

Status Codes and Reason Phrases

Status Code is the number that tells you if the request succeeded or failed
Reason Phrase explains what happened.

These codes fall into five main categories:
1. Informational Responses (100-199): These codes mean the server has received part of the request and is waiting for the rest. It’s a "keep going" signal.
2. Successful Responses (200-299): These codes mean everything worked as expected. The server processed the request and sent back the requested data.
3. Redirection Messages (300-399): These codes tell you that the resource you requested has moved to a different location, usually providing the new URL.
4. Client Error Responses (400-499): These codes indicate a problem with the request. Maybe the URL is wrong, or you’re missing some required info, like authentication.
5. Server Error Responses (500-599): These codes mean the server encountered an error while trying to fulfil the request. These are usually server-side issues and not the client’s fault.

Common Status Codes:
1. 100 (Continue): The server got the first part of the request and is ready for the rest.
2. 200 (OK): The request was successful, and the server is sending back the requested resource.
3. 301 (Moved Permanently): The resource you’re requesting has been permanently moved to a new URL. Use the new URL from now on.
4. 404 (Not Found): The server couldn’t find the resource at the given URL. Double-check that you’ve got the right address.
5. 500 (Internal Server Error): Something went wrong on the server’s end, and it couldn’t process your request.

Question 15: What part of an HTTP response provides the HTTP version, status code, and a brief explanation of the response's outcome?
Answer: Status Line

Question 16: Which category of HTTP response codes indicates that the web server encountered an internal issue or is unable to fulfil the client's request?
Answer: Server Error Responses

Question 17: Which HTTP status code indicates that the requested resource could not be found on the web server?
Answer: 404


HTTP Response: Headers and Body

Response Headers: HTTP response headers, which are basically key-value pairs. These headers provide important info about the response and tell the client (usually the browser) how to handle it.

Required Response Headers: Some response headers are crucial for making sure the HTTP response works properly. They provide essential info that both the client and server need to process everything correctly.
few important ones are:
1. Date:
Example: Date: Fri, 23 Aug 2024 10:43:21 GMT
This header shows the exact date and time when the response was generated by the server
2. Content-Type:
Example: Content-Type: text/html; charset=utf-8
It tells the client what kind of content it’s getting, like whether it’s HTML, JSON, or something else. It also includes the character set (like UTF-8) to help the browser display it properly.
3. Content-Type:
Example: Content-Type: text/html; charset=utf-8
It tells the client what kind of content it’s getting, like whether it’s HTML, JSON, or something else. It also includes the character set (like UTF-8) to help the browser display it properly.

Other Common Response Headers: Other common headers that give additional instructions to the client or browser and help control how the response should be handled.
The following are the few mentions:
1. Set-Cookie:
Example: Set-Cookie: sessionId=38af1337es7a8
This one sends cookies from the server to the client, which the client then stores and sends back with future requests. To keep things secure, make sure cookies are set with the HttpOnly flag (so they can’t be accessed by JavaScript) and the Secure flag (so they’re only sent over HTTPS).
2. Cache-Control:
Example: Cache-Control: max-age=600
This header tells the client how long it can cache the response before checking with the server again. It can also prevent sensitive info from being cached if needed (using no-cache).
3. Location:
Example: Location: /index.html
This one’s used in redirection (3xx) responses. It tells the client where to go next if the resource has moved. If users can modify this header during requests, be careful to validate and sanitise it—otherwise, you could end up with open redirect vulnerabilities, where attackers can redirect users to harmful sites.

Response Body: The HTTP response body is where the actual data lives—things like HTML, JSON, images, etc., that the server sends back to the client. To prevent injection attacks like Cross-Site Scripting (XSS), always sanitise and escape any data (especially user-generated content) before including it in the response.

Question 18: Which HTTP response header can reveal information about the web server's software and version, potentially exposing it to security risks if not removed?
Answer: Server

Question 19: Which flag should be added to cookies in the Set-Cookie HTTP response header to ensure they are only transmitted over HTTPS, protecting them from being exposed during unencrypted transmissions?
Answer: Secure

Question 20: Which flag should be added to cookies in the Set-Cookie HTTP response header to prevent them from being accessed via JavaScript, thereby enhancing security against XSS attacks?
Answer: HttpOnly 


Security Headers

Security Headers: HTTP Security Headers help improve the overall security of the web application by providing mitigations against attacks like Cross-Site Scripting (XSS), clickjacking, and others.

These are few following security headers:
1. Content-Security-Policy (CSP): A CSP header is an additional security layer that can help mitigate against common attacks like Cross-Site Scripting (XSS). Malicious code could be hosted on a separate website or domain and injected into the vulnerable website. A CSP provides a way for administrators to say what domains or sources are considered safe and provides a layer of mitigation to such attacks.
example CSP header: Content-Security-Policy: default-src 'self'; script-src 'self' https://cdn.tryhackme.com; style-src 'self'
Note: Each of these give an option to an administrator to define at various levels of granularity, what domains are allowed for what type of content.
We see the use of:
1. default-src - which specifies the default policy of self, which means only the current website.
2. script-src - which specifics the policy for where scripts can be loaded from, which is self along with scripts hosted on https://cdn.tryhackme.com
3. style-src - which specifies the policy for where style CSS style sheets can be loaded from the current website (self)

2. Strict-Transport-Security (HSTS): The HSTS header ensures that web browsers will always connect over HTTPS.
example of HSTS: Strict-Transport-Security: max-age=63072000; includeSubDomains; preload
HSTS header by directive:
1. max-age - This is the expiry time in seconds for this setting
2. includeSubDomains - An optional setting that instructs the browser to also apply this setting to all subdomains.
3. preload - This optional setting allows the website to be included in preload lists. Browsers can use preload lists to enforce HSTS before even having their first visit to a website.

3. X-Content-Type-Options: The X-Content-Type-Options header can be used to instruct browsers not to guess the MIME time of a resource but only use the Content-Type header.
example: X-Content-Type-Options: nosniff
X-Content-Type-Options header by directives:
1. nosniff - This directive instructs the browser not to sniff or guess the MIME type.

4. Referrer-Policy: This header controls the amount of information sent to the destination web server when a user is redirected from the source web server, such as when they click a hyperlink. The header is available to allow a web administrator to control what information is shared.
examples of Referrer-Policy: Referrer-Policy: no-referrer, Referrer-Policy: same-origin, Referrer-Policy: strict-origin, Referrer-Policy: strict-origin-when-cross-origin
breakdown of the Referrer-Policy header by directives:
1. no-referrer  - This completely disables any information being sent about the referrer
2. same-origin  - This policy will only send referrer information when the destination is part of the same origin. This is helpful when you want referrer information passed when hyperlinks are within the same website but not outside to external websites.
3. strict-origin - This policy only sends the referrer as the origin when the protocol stays the same. So, a referrer is sent when an HTTPS connection goes to another HTTPS connection.
4. strict-origin-when-cross-origin  - This is similar to strict-origin except for same-origin requests, where it sends the full URL path in the origin header.

Question 21: In a Content Security Policy (CSP) configuration, which property can be set to define where scripts can be loaded from?
Answer: script-src

Question 22: When configuring the Strict-Transport-Security (HSTS) header to ensure that all subdomains of a site also use HTTPS, which directive should be included to apply the security policy to both the main domain and its subdomains?
Answer: includeSubDomains

Question 23: Which HTTP header directive is used to prevent browsers from interpreting files as a different MIME type than what is specified by the server, thereby mitigating content type sniffing attacks?
Answer: nosniff

Practical Task: Making HTTP Requests
Check out the activity file.

Question 24: Make a GET request to /api/users. What is the flag?
Question 25: Make a POST request to /api/user/2 and update the country of Bob from UK to US. What is the flag?
Question 26: Make a DELETE request to /api/user/1 to delete the user. What is the flag?


Conclusion

learned a bit more about:
What components are involved in web applications
The structure of the Uniform Resource Locator (URL)
What are HTTP messages, requests, headers and responses
The importance of Security headers

