Introduction

John the Ripper is a well-known, well-loved, and versatile hash-cracking tool. It combines a fast cracking speed with an extraordinary range of compatible hash types.

Learning Objectives
Upon the completion of this room, you learn about using John for:
1. Cracking Windows authentication hashes
2. Crack /etc/shadow hashes
3. Cracking password-protected Zip files
4. Cracking password-protected RAR files
5. Cracking SSH keys


Basic Terms

What are Hashes?
A hash is a way of taking a piece of data of any length and representing it in another fixed-length form. This process masks the original value of the data. The hash value is obtained by running the original data through a hashing algorithm. Many popular hashing algorithms exist, such as MD4, MD5, SHA1 and NTLM.

What Makes Hashes Secure?
It is easy to calculate the hash value of a given input; however, it is a hard problem to find the original input given the hash value. In simple terms, a hard problem quickly becomes computationally infeasible in computer science. This computational problem has its roots in mathematics as P vs NP.

P and NP are two classes of problems that help us understand the efficiency of algorithms:
1. P (Polynomial Time): Class P covers the problems whose solution can be found in polynomial time. Consider sorting a list in increasing order. The longer the list, the longer it would take to sort; however, the increase in time is not exponential.
2. NP (Non-deterministic Polynomial Time): Problems in the class NP are those for which a given solution can be checked quickly, even though finding the solution itself might be hard. In fact, we don’t know if there is a fast algorithm to find the solution in the first place.

Where John Comes in
dictionary attack, and John the Ripper, or John as it’s commonly shortened, is a tool for conducting fast brute force attacks on various hash types.

Note: If you have the hashed version of a password, for example, and you know the hashing algorithm, you can use that hashing algorithm to hash a large number of words, called a dictionary. You can then compare these hashes to the one you’re trying to crack to see if they match. If they do, you know what word corresponds to that hash- you’ve cracked it!, This process is called dictionary attack.

Question 1: What is the most popular extended version of John the Ripper?
Answer: Jumbo John


Setting Up Your System

Kali has Jumbo john pre-installed.

Wordlists
you need a list of words to hash and compare; unsurprisingly, this is called a wordlist. There are many different wordlists out there, and a good collection can be found in the SecLists(https://github.com/danielmiessler/SecLists) repository.
Kali Linux distributions, the /usr/share/wordlists directory contains a series of great wordlists.

Question 2: Which website’s breach was the rockyou.txt wordlist created from?
Answer: rockyou.com


Cracking Basic Hashes

John Basic Syntax:
john [options] [file path]
1. john: Invokes the John the Ripper program
2. [options]: Specifies the options you want to use
3. [file path]: The file containing the hash you’re trying to crack; if it’s in the same directory, you won’t need to name a path, just the file.

Automatic Cracking
John has built-in features to detect what type of hash it’s being given and to select appropriate rules and formats to crack it for you; this isn’t always the best idea as it can be unreliable, but if you can’t identify what hash type you’re working with and want to try cracking it, it can be a good option! To do this, 
we use the following syntax: john --wordlist=[path to wordlist] [path to file]
1. --wordlist=: Specifies using wordlist mode, reading from the file that you supply in the provided path
2. [path to wordlist]: The path to the wordlist you’re using, as described in the previous task

Example Usage:

john --wordlist=/usr/share/wordlists/rockyou.txt hash_to_crack.txt

Note: When you tell John to use formats, if you’re dealing with a standard hash type, e.g. md5 as in the example above, you have to prefix it with raw- to tell John you’re just dealing with a standard hash type, though this doesn’t always apply. To check if you need to add the prefix or not, you can list all of John’s formats using john --list=formats and either check manually or grep for your hash type using something like john --list=formats | grep -iF "md5".

Question 3: What type of hash is hash1.txt?
Question 4: What is the cracked value of hash1.txt?
Question 5: What type of hash is hash2.txt?
Question 6: What is the cracked value of hash2.txt?
Question 7: What type of hash is hash3.txt?
Question 8: What is the cracked value of hash3.txt?
Question 9: What type of hash is hash4.txt?
Question 10: What is the cracked value of hash4.txt?

Note: Perform the actions provided as part of Task-04 to get all the answers.


Cracking Windows Authentication Hashes

cracking something a little bit more complicated, something that you may even want to attempt if you’re on an actual Penetration Test or Red Team engagement. Authentication hashes are the hashed versions of passwords stored by operating systems; it is sometimes possible to crack them using our brute-force methods. To get your hands on these hashes, you must often already be a privileged user.

NTHash / NTLM
NThash is the hash format modern Windows operating system machines use to store user and service passwords. It’s also commonly referred to as NTLM, which references the previous version of Windows format for hashing passwords known as LM, thus NT/LM.

In Windows, SAM (Security Account Manager) is used to store user account information, including usernames and hashed passwords. You can acquire NTHash/NTLM hashes by dumping the SAM database on a Windows machine, using a tool like Mimikatz, or using the Active Directory database: NTDS.dit. You may not have to crack the hash to continue privilege escalation, as you can often conduct a “pass the hash” attack instead, but sometimes, hash cracking is a viable option if there is a weak password policy.

Practical
Now that you know the theory behind it, see if you can use the techniques we practised in the last task and the knowledge of what type of hash this is to crack the ntlm.txt file! The file is located in ~/John-the-Ripper-The-Basics/Task05/.

Question 11: What do we need to set the --format flag to in order to crack this hash?
Question 12: What is the cracked value of this password?

Note: Perform the actions provided as part of Task-05 to get all the answers.


Cracking /etc/shadow Hashes

Cracking Hashes from /etc/shadow
The /etc/shadow file is the file on Linux machines where password hashes are stored. It also stores other information, such as the date of last password change and password expiration information. It contains one entry per line for each user or user account of the system. This file is usually only accessible by the root user, so you must have sufficient privileges to access the hashes.

Unshadowing
John can be very particular about the formats it needs data in to be able to work with it; for this reason, to crack /etc/shadow passwords, you must combine it with the /etc/passwd file for John to understand the data it’s being given. To do this, we use a tool built into the John suite of tools called unshadow. 

basic syntax of unshadow is as follows: unshadow [path to passwd] [path to shadow]
1. unshadow: Invokes the unshadow tool
2. [path to passwd]: The file that contains the copy of the /etc/passwd file you’ve taken from the target machine
3. [path to shadow]: The file that contains the copy of the /etc/shadow file you’ve taken from the target machine

Example Usage: unshadow local_passwd local_shadow > unshadowed.txt

Note on the files: When using unshadow, you can either use the entire /etc/passwd and /etc/shadow files, assuming you have them available, or you can use the relevant line from each, for example:
FILE 1 - local_passwd
Contains the /etc/passwd line for the root user: root:x:0:0::/root:/bin/bash
FILE 2 - local_shadow
Contains the /etc/shadow line for the root user: root:$6$2nwjN454g.dv4HN/$m9Z/r2xVfweYVkrr.v5Ft8Ws3/YYksfNwq96UL1FX0OJjY1L6l.DS3KEVsZ9rOVLB/ldT

Cracking
We can then feed the output from unshadow, in our example use case called unshadowed.txt, directly into John. We should not need to specify a mode here as we have made the input specifically for John; however, in some cases, you will need to specify the format as we have done previously using: --format=sha512crypt

Ex: john --wordlist=/usr/share/wordlists/rockyou.txt --format=sha512crypt unshadowed.txt

Practical
follow the process to crack the password hash of the root user provided in the etchashes.txt file.

Question 13: What is the root password?

Note: Perform the actions provided as part of Task-06 to get all the answers.


Single Crack Mode

Single Crack mode: John uses only the information provided in the username to try and work out possible passwords heuristically by slightly changing the letters and numbers contained within the username.

Word Mangling
Consider the username “Markus”.
Some possible passwords could be:
1. Markus1, Markus2, Markus3 (etc.)
2. MArkus, MARkus, MARKus (etc.)
3. Markus!, Markus$, Markus* (etc.)

John is building its dictionary based on the information it has been fed and uses a set of rules called “mangling rules,” which define how it can mutate the word it started with to generate a wordlist based on relevant factors for the target you’re trying to crack. This exploits how poor passwords can be based on information about the username or the service they’re logging into.

GECOS-General Electric Comprehensive Operating System
John’s implementation of word mangling also features compatibility with the GECOS field of the UNIX operating system, as well as other UNIX-like operating systems such as Linux. GECOS stands for General Electric Comprehensive Operating System. 
The fifth field in the user account record is the GECOS field. It stores general information about the user, such as the user’s full name, office number, and telephone number, among other things. John can take information stored in those records, such as full name and home directory name, to add to the wordlist it generates when cracking /etc/shadow hashes with single crack mode.

Using Single Crack Mode
Syntax: john --single --format=[format] [path to file]
1. --single: This flag lets John know you want to use the single hash-cracking mode
2. --format=[format]: As always, it is vital to identify the proper format.
Example Usage: john --single --format=raw-sha256 hashes.txt

A Note on File Formats in Single Crack Mode:
If you’re cracking hashes in single crack mode, you need to change the file format that you’re feeding John for it to understand what data to create a wordlist from. You do this by prepending the hash with the username that the hash belongs to, so according to the above example, we would change the file hashes.txt
From 1efee03cdcb96d90ad48ccc7b8666033
To mike:1efee03cdcb96d90ad48ccc7b8666033

Practical
access the hash and crack it, assuming that the user it belongs to is called “Joker”.

Question 14: What is Joker’s password?
Note: Perform the actions provided as part of Task-07 to get all the answers.


Custom Rules

What are Custom Rules?
You may have some ideas about some good mangling patterns or what patterns your passwords often use that could be replicated with a particular mangling pattern. The good news is that you can define your rules, which John will use to create passwords dynamically. The ability to define such rules is beneficial when you know more information about the password structure of whatever your target is.

Common Custom Rules
enforced password complexity: prompt telling you that passwords have to contain at least one character from each of the following:
1. Lowercase letter
2. Uppercase letter
3. Number
4. Symbol

Note: can be exploited by the fact that most users will be predictable in the location of these symbols.

As attackers, we can exploit the fact that we know the likely position of these added elements to create dynamic passwords from our wordlists.(exploit password complexity predictability)

How to create Custom Rules
Custom rules are defined in the john.conf file. 

Go over the syntax of these custom rules:
The first line: [List.Rules:THMRules] is used to define the name of your rule; this is what you will use to call your custom rule a John argument.

We then use a regex style pattern match to define where the word will be modified; again, we will only cover the primary and most common modifiers here:
Az: Takes the word and appends it with the characters you define
A0: Takes the word and prepends it with the characters you define
c: Capitalises the character positionally
These can be used in combination to define where and what in the word you want to modify.

Lastly, we must define what characters should be appended, prepended or otherwise included. We do this by adding character sets in square brackets [ ] where they should be used. These follow the modifier patterns inside double quotes " ". Here are some common examples:
[0-9]: Will include numbers 0-9
[0]: Will include only the number 0
[A-z]: Will include both upper and lowercase
[A-Z]: Will include only uppercase letters
[a-z]: Will include only lowercase letters

Example:
[List.Rules:PoloPassword]
cAz"[0-9] [!£$%@]"
For mangling and creating wordlist to arrive at all possible passwords(Polopassword1!)

Using Custom Rules
call this custom rule a John argument using the  --rule=PoloPassword flag
As a full command: john --wordlist=[path to wordlist] --rule=PoloPassword [path to file]

Note: Jumbo John already has an extensive list of custom rules containing modifiers for use in almost all cases. If you get stuck, try looking at those rules [around line 678] if your syntax isn’t working correctly.

Question 15: What do custom rules allow us to exploit?
Answer: Password complexity predictability

Question 16: What rule would we use to add all capital letters to the end of the word?
Answer: Az"[A-Z]"

Question 17: What flag would we use to call a custom rule called THMRules?
Answer: --rule=THMRules


Cracking Password Protected Zip Files

John to crack the password on password-protected Zip.

Zip2John
Use the zip2john tool to convert the Zip file into a hash format that John can understand and hopefully crack.

The primary usage is like this: zip2john [options] [zip file] > [output file]
1. [options]: Allows you to pass specific checksum options to zip2john; this shouldn’t often be necessary
2. [zip file]: The path to the Zip file you wish to get the hash of
3. >: This redirects the output from this command to another file
4. [output file]: This is the file that will store the output

Example Usage: zip2john zipfile.zip > zip_hash.txt

Cracking
We’re then able to take the file we output from zip2john in our example use case, zip_hash.txt, and, as we did with unshadow, feed it directly into John as we have made the input specifically for it.
Usage: john --wordlist=/usr/share/wordlists/rockyou.txt zip_hash.txt

Question 18: What is the password for the secure.zip file?
Question 19: What is the contents of the flag inside the zip file?
Note: Perform the actions provided as part of Task-09 to get all the answers.


Cracking Password-Protected RAR Archives

Cracking a Password-Protected RAR Archive
RAR archives are compressed files created by the WinRAR archive manager. Like Zip files, they compress folders and files.
obtain the password for RAR archives.

Rar2John
rar2john tool to convert the RAR file into a hash format that John can understand. 
The basic syntax is as follows: rar2john [rar file] > [output file]
1. rar2john: Invokes the rar2john tool
2. [rar file]: The path to the RAR file you wish to get the hash of
3. >: This redirects the output of this command to another file
4. [output file]: This is the file that will store the output from the command

Example Usage: /opt/john/rar2john rarfile.rar > rar_hash.txt

Cracking
we can take the file we output from rar2john in our example use case, rar_hash.txt, and feed it directly into John as we did with zip2john.
Usage: john --wordlist=/usr/share/wordlists/rockyou.txt rar_hash.txt

Question 20: What is the password for the secure.rar file?
Question 21: What are the contents of the flag inside the zip file?
Note: Perform the actions provided as part of Task-09 to get all the answers.


Cracking SSH Keys with John

Cracking SSH Key Passwords
using John to crack the SSH private key password of id_rsa files.
Unless configured otherwise, you authenticate your SSH login using a password. However, you can configure key-based authentication, which lets you use your private key, id_rsa, as an authentication key to log in to a remote machine over SSH. However, doing so will often require a password to access the private key; here, we will be using John to crack this password to allow authentication over SSH using the key.

SSH2John
ssh2john converts the id_rsa private key, which is used to log in to the SSH session, into a hash format that John can work with.
Syntax: ssh2john [id_rsa private key file] > [output file]
1. ssh2john: Invokes the ssh2john tool
2. [id_rsa private key file]: The path to the id_rsa file you wish to get the hash of
3. >: This is the output director. We’re using it to redirect the output from this command to another file.
4. [output file]: This is the file that will store the output from

Example Usage: /opt/john/ssh2john.py id_rsa > id_rsa_hash.txt

Cracking
we’re feeding the file we output from ssh2john, which in our example use case is called id_rsa_hash.txt and, as we did with rar2john, 
we can use this seamlessly with John: john --wordlist=/usr/share/wordlists/rockyou.txt id_rsa_hash.txt

Question 22: What is the SSH private key password?
Note: Perform the actions provided as part of Task-09 to get all the answers.


Further Reading

