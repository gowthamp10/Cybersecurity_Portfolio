Room: Introductory Networking
Description: An introduction to networking theory and basic networking tools

Introduction

Learning Objective of the Room
1. The OSI Model
2. The TCP/IP Model
3. How these models look in practice
4. An introduction to basic networking tools

The OSI Model: An Overview

The OSI (Open Systems Interconnection) Model is a standardised model which we use to demonstrate the theory behind computer networking.
The OSI model consists of seven layers:
Layer 7: Application 

The application layer of the OSI model essentially provides networking options to programs running on a computer.
It works almost exclusively with applications, providing an interface for them to use in order to transmit data. When data is given to the application layer, it is passed down into the presentation layer.

Layer 6: Presentation

The presentation layer translates the data into a standardised format, as well as handling any encryption, compression or other transformations to the data. With this complete, the data is passed down to the session layer.

Layer 5: Session

If a session can be established then it's the job of the session layer to maintain it, as well as co-operate with the session layer of the remote computer in order to synchronise communications. 
The session layer is particularly important as the session that it creates is unique to the communication in question. This is what allows you to make multiple requests to different endpoints simultaneously without all the data getting mixed up (think about opening two tabs in a web browser at the same time)! When the session layer has successfully logged a connection between the host and remote computer the data is passed down to Layer 4: the transport Layer.

Layer 4: Transport

The transport layer is a very interesting layer that serves numerous important functions. Its first purpose is to choose the protocol over which the data is to be transmitted. The two most common protocols in the transport layer are TCP (Transmission Control Protocol) and UDP (User Datagram Protocol).
With a protocol selected, the transport layer then divides the transmission up into bite-sized pieces (over TCP these are called segments, over UDP they're called datagrams), which makes it easier to transmit the message successfully. 

Layer 3: Network

The network layer is responsible for locating the destination of your request.

Layer 2: Data Link

The data link layer focuses on the physical addressing of the transmission. 
It receives a packet from the network layer (that includes the IP address for the remote computer) and adds in the physical (MAC) address of the receiving endpoint. Inside every network enabled computer is a Network Interface Card (NIC) which comes with a unique MAC (Media Access Control) address to identify it.

Additionally, it's also the job of the data link layer to present the data in a format suitable for transmission.

The data link layer also serves an important function when it receives data, as it checks the received information to make sure that it hasn't been corrupted during transmission, which could well happen when the data is transmitted by layer 1: the physical layer.

Layer 1: Physical

The physical layer is right down to the hardware of the computer. This is where the electrical pulses that make up data transfer over a network are sent and received. 
It's the job of the physical layer to convert the binary data of the transmission into signals and transmit them across the network, as well as receiving incoming signals and converting them back into binary data.

Question 1: Which layer would choose to send data over TCP or UDP?
Ans:4

Question 2:Which layer checks received information to make sure that it hasn't been corrupted?
Ans:2

Question 3:In which layer would data be formatted in preparation for transmission?
Ans:2

Question 4:Which layer transmits and receives data?
Ans:1

Question 5:Which layer encrypts, compresses, or otherwise transforms the initial data to give it a standardised format?
Ans:6

Question 6:Which layer tracks communications between the host and receiving computers?
Ans:5

Question 7:Which layer accepts communication requests from applications?
Ans:7

Question 8:Which layer handles logical addressing?
Ans:3

Question 9:When sending data over TCP, what would you call the "bite-sized" pieces of data?
Ans:segments

Question 10:[Research] Which layer would the FTP protocol communicate with?
Ans:7

Question 11:Which transport layer protocol would be best suited to transmit a live video?
Ans:UDP

Encapsulation

As the data is passed down each layer of the model, more information containing details specific to the layer in question is added on to the start of the transmission.
The process of adding headers and trailers to the data while it mover down the layer is Encapsulation.
The reverse process of Encapsulation is called De-Encapsulation.

The processes of encapsulation and de-encapsulation are very important -- not least because of their practical use, but also because they give us a standardised method for sending data. 
This means that all transmissions will consistently follow the same methodology, allowing any network enabled device to send a request to any other reachable device and be sure that it will be understood -- regardless of whether they are from the same manufacturer; use the same operating system; or any other factors.

Layer(7-5): Data -> Data
Layer(4): Data -> Segments(TCP)/Datagrams(UDP)
Layer(3): Data -> packets
Layer(2): Data -> Frames
Layer(1): Data -> Bits

Question 12:How would you refer to data at layer 2 of the encapsulation process (with the OSI model)?
Ans:Frames

Question 13:How would you refer to data at layer 4 of the encapsulation process (with the OSI model), if the UDP protocol has been selected?
Ans:Datagrams

Question 14:What process would a computer perform on a received message?
Ans:De-Encapsulation

Question 15:Which is the only layer of the OSI model to add a trailer during encapsulation?
Ans:Data link

Question 16:Does encapsulation provide an extra layer of security (Aye/Nay)?
Ans:Aye

The TCP/IP Model

The TCP/IP model is, in many ways, very similar to the OSI model. 
It's a few years older, and serves as the basis for real-world networking. 
The TCP/IP model consists of four layers: 
Layer 4: Application
Layer 3: Transport
Layer 2: Internet
Layer 1: Network Interface 

Between them, these cover the same range of functions as the seven layers of the OSI Model.

Note: Some recent sources split the TCP/IP model into five layers -- breaking the Network Interface layer into Data Link and Physical layers (as with the OSI model). 
This is accepted and well-known; however, it is not officially defined (unlike the original four layers which are defined in RFC1122). It's up to you which version you use -- both are generally considered valid.

TCP/IP takes its name from the two most important of these: the Transmission Control Protocol (which we touched upon earlier in the OSI model) that controls the flow of data between two endpoints, and the Internet Protocol, which controls how packets are addressed and sent.

3-Way handshake is performed to make connection(SYN->SYN/ACK->ACK).

Question 17:Which model was introduced first, OSI or TCP/IP?
Ans:TCP/IP

Question 18:Which layer of the TCP/IP model covers the functionality of the Transport layer of the OSI model (Full Name)?
Ans:Transport

Question 19:Which layer of the TCP/IP model covers the functionality of the Session layer of the OSI model (Full Name)?
Ans:Application

Question 20:The Network Interface layer of the TCP/IP model covers the functionality of two layers in the OSI model. These layers are Data Link, and?.. (Full Name)?
Ans:Physical

Question 21:Which layer of the TCP/IP model handles the functionality of the OSI network layer?
Ans:Internet

Question 22:What kind of protocol is TCP?
Ans:Connection-based

Question 23:What is SYN short for?
Ans:Synchronise

Question 24:What is the second step of the three way handshake?
Ans:SYN/ACK

Question 25:What is the short name for the "Acknowledgement" segment in the three-way handshake?
Ans:ACK

Networking tool PING 

The ping command is used when we want to test whether a connection to a remote resource is possible.
Ping works using the ICMP protocol, which is one of the slightly less well-known TCP/IP protocols that were mentioned earlier. 
The ICMP protocol works on the Network layer of the OSI Model, and thus the Internet layer of the TCP/IP model. 
Syntax: ping <target>

One of the big advantages of ping is that it's pretty much ubiquitous to any network enabled device. All operating systems support it out of the box, and even most embedded devices can use ping!

Question 26:What command would you use to ping the bbc.co.uk website?
Ans:ping bbc.co.uk

Question 27:Command: "Ping muirlandoracle.co.uk"  What is the IPv4 address?
Ans:217.160.0.152

Question 28:What switch lets you change the interval of sent ping requests?
Ans:-i

Question 29:What switch would allow you to restrict requests to IPv4?
Ans:-4

Question 30:What switch would give you a more verbose output?
Ans:-valid

Networking tool Traceroute

The logical follow-up to the ping command is 'traceroute'. Traceroute can be used to map the path your request takes as it heads to the target machine.
Traceroute allows you to see each of these connections -- it allows you to see every intermediate step between your computer and the resource that you requested. 
Syntax: traceroute <destination>

By default, the Windows traceroute utility (tracert) operates using the same ICMP protocol that ping utilises, and the Unix equivalent operates over UDP. 
This can be altered with switches in both instances.

Question 31: Use traceroute on tryhackme.com
Can you see the path your request has taken?
Ans: 5 hops

Question 32:What switch would you use to specify an interface when using Traceroute?
Ans:-i

Question 33:What switch would you use if you wanted to use TCP SYN requests when tracing the route?
Ans:-T

Question 34:[Lateral Thinking] Which layer of the TCP/IP model will traceroute run on by default (Windows)?
Ans:Internet 

Networking tool WHOIS

Domains are leased out by companies called Domain Registrars. If you want a domain, you go and register with a registrar, then lease the domain for a certain length of time. 

Whois essentially allows you to query who a domain name is registered to. 
In Europe personal details are redacted; however, elsewhere you can potentially get a great deal of information from a whois search.
Syntax: whois <domain>

Question 35:Perform a whois search on facebook.com
Ans: No answer needed

Question 36:What is the registrant postal code for facebook.com?
Ans:94025

Question 37:When was the facebook.com domain first registered (Format: DD/MM/YYYY)?
Ans:29/03/1997

Question 38:Perform a whois search on microsoft.com
Ans:No answer needed

Question 39:Which city is the registrant based in?
Ans:Redmond

Question 40:[OSINT] What is the name of the golf course that is near the registrant address for microsoft.com?
Ans:Bellevue Golf Course

Question 41:What is the registered Tech Email for microsoft.com?
Ans:msnhst@microsoft.com

Networking tool DIG  

Ever wondered how a URL gets converted into an IP address that your computer can understand? The answer is a TCP/IP protocol called DNS (Domain Name System).

DNS look-up breakup

You make a request to a website. The first thing that your computer does is check its local "Hosts File" to see if an explicit IP->Domain mapping has been created. 
This is an older system than DNS and much less commonly used in modern environments; however, it still takes precedence in the search order of most operating systems. 
If no mapping has been manually created, the computer then checks its local DNS cache to see if it already has an IP address stored for the website; if it does, great. 
If not, it goes to the next stage of the process.

Assuming the address hasn't already been found, your computer will then send a request to what is known as a recursive DNS server. 
These will automatically be known to the router on your network. Many Internet Service Providers (ISPs) maintain their own recursive servers, but companies such as Google and OpenDNS also control recursive servers. 
This is how your computer automatically knows where to send the request for information: details for a recursive DNS server are stored in your router or computer. 
This server will also maintain a cache of results for popular domains; however, if the website you've requested isn't stored in the cache, the recursive server will pass the request on to a root name server.

Before 2004 there were precisely 13 root name DNS servers in the world. 
These days there are many more; however, they are still accessible using the same 13 IP addresses assigned to the original servers (balanced so that you get the closest server when you make a request). 
The root name servers essentially keep track of the DNS servers in the next level down, choosing an appropriate one to redirect your request to. These lower level servers are called Top-Level Domain servers.

Top-Level Domain (TLD) servers are split up into extensions. So, for example, if you were searching for tryhackme.com your request would be redirected to a TLD server that handled .com domains. 
If you were searching for bbc.co.uk your request would be redirected to a TLD server that handles .co.uk domains. As with root name servers, TLD servers keep track of the next level down: Authoritative name servers. 
When a TLD server receives your request for information, the server passes it down to an appropriate Authoritative name server.

Authoritative name servers are used to store DNS records for domains directly. 
In other words, every domain in the world will have its DNS records stored on an Authoritative name server somewhere or another; they are the source of the information. 
When your request reaches the authoritative name server for the domain you're querying, it will send the relevant information back to you, allowing your computer to connect to the IP address behind the domain you requested.

Dig allows us to manually query recursive DNS servers of our choice for information about domains:
dig <domain> @<dns-server-ip>

TTL (Time To Live) of the queried DNS record. As mentioned previously, when your computer queries a domain name, it stores the results in its local cache.
It's important to remember that TTL (in the context of DNS caching) is measured in seconds.

Question 42:What is DNS short for?
Ans:Domain Name System

Question 43:What is the first type of DNS server your computer would query when you search for a domain?
Ans:Recursive

Question 44:What type of DNS server contains records specific to domain extensions (i.e. .com, .co.uk*, etc)*? Use the long version of the name.
Ans:Top-Level Domain

Question 45:Where is the very first place your computer would look to find the IP address of a domain?
Ans:Hosts File

Question 46:[Research] Google runs two public DNS servers. One of them can be queried with the IP 8.8.8.8, what is the IP address of the other one?
Ans:8.8.4.4

Question 47:If a DNS query has a TTL of 24 hours, what number would the dig query show?
Ans:86400



