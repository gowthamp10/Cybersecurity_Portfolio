Introduction

The Protocols and Servers room covered many protocols:
1. Telnet
2. HTTP
3. FTP
4. SMTP
5. POP3
6. IMAP

Servers implementing these protocols are subject to different kinds of attacks. To name a few, consider:
1. Sniffing Attack (Network Packet Capture)
2. Man-in-the-Middle (MITM) Attack
3. Password Attack (Authentication Attack)
4. Vulnerabilities

Knowing that we are protecting the Confidentiality, Integrity, and Availability (CIA), an attack aims to cause Disclosure, Alteration, and Destruction (DAD).
This room will focus on how a protocol can be upgraded or replaced to protect against disclosure and alteration, i.e. protecting the confidentiality and integrity of the transmitted data. We will be recommending other modules that cover additional topics.

Sniffing Attack

Sniffing attack refers to using a network packet capture tool to collect information about the target. When a protocol communicates in cleartext, the data exchanged can be captured by a third party to analyse. A simple network packet capture can reveal information, such as the content of private messages and login credentials, if the data isn't encrypted in transit.

A sniffing attack can be conducted using an Ethernet (802.3) network card, provided that the user has proper permissions (root permissions on Linux and administrator privileges on MS Windows). 
There are many programs available to capture network packets. We consider the following:
1. Tcpdump is a free open source command-line interface (CLI) program that has been ported to work on many operating systems.
2. Wireshark is a free open source graphical user interface (GUI) program available for several operating systems, including Linux, macOS and MS Windows.
3. Tshark is a CLI alternative to Wireshark.

Consider a user checking his email messages using POP3. First, we are going to use Tcpdump to attempt to capture the username and password. In the terminal output below, we used the command sudo tcpdump port 110 -A. Before explaining this command, we should mention that this attack requires access to the network traffic, for example, via a wiretap or a switch with port mirroring. Alternatively, we can access the traffic exchanged if we launch a successful Man-in-the-Middle (MITM) attack.
We need sudo as packet captures require root privileges. We wanted to limit the number of captured and displayed packets to those exchanged with the POP3 server. We know that POP3 uses port 110, so we filtered our packets using port 110. Finally, we wanted to display the contents of the captured packets in ASCII format, so we added -A.

In brief, any protocol that uses cleartext communication is susceptible to this kind of attack. The only requirement for this attack to succeed is to have access to a system between the two communicating systems. This attack requires attention; the mitigation lies in adding an encryption layer on top of any network protocol. In particular, Transport Layer Security (TLS) has been added to HTTP, FTP, SMTP, POP3, IMAP and many others. For remote access, Telnet has been replaced by the secure alternative Secure Shell (SSH).

Question 1: What do you need to add to the command sudo tcpdump to capture only Telnet traffic?
Answer: port 23

Question 2: What is the simplest display filter you can use with Wireshark to show only IMAP traffic?
Answer: imap

Man-in-the-Middle (MITM) Attack

A Man-in-the-Middle (MITM) attack occurs when a victim (A) believes they are communicating with a legitimate destination (B) but is unknowingly communicating with an attacker (E).
This attack is relatively simple to carry out if the two parties do not confirm the authenticity and integrity of each message. In some cases, the chosen protocol does not provide secure authentication or integrity checking; moreover, some protocols have inherent insecurities that make them susceptible to this kind of attack.
Any time you browse over HTTP, you are susceptible to a MITM attack, and the scary thing is that you cannot recognize it. Many tools would aid you in carrying out such an attack, such as Ettercap and Bettercap.

MITM can also affect other cleartext protocols such as FTP, SMTP, and POP3. Mitigation against this attack requires the use of cryptography. The solution lies in proper authentication along with encryption or signing of the exchanged messages. With the help of Public Key Infrastructure (PKI) and trusted root certificates, Transport Layer Security (TLS) protects from MITM attacks.

Question 3: How many different interfaces does Ettercap offer?
Answer: 3

Question 4: In how many ways can you invoke Bettercap?
Answer: 3

Transport Layer Security (TLS)

SSL (Secure Sockets Layer) started when the world wide web started to see new applications, such as online shopping and sending payment information. Netscape introduced SSL in 1994, with SSL 3.0 being released in 1996. But eventually, more security was needed, and TLS (Transport Layer Security) protocol was introduced in 1999. 
Because of the close relation between SSL and TLS, one might be used instead of the other. However, TLS is more secure than SSL, and it has practically replaced SSL.

The following table lists the protocols we have covered and their default ports before and after the encryption upgrade via SSL/TLS.

Protocol	Default Port	Secured Protocol	Default Port with TLS
HTTP	        80	            HTTPS	                 443
FTP	            21	            FTPS	                 990
SMTP	        25	            SMTPS	                 465
POP3	        110	            POP3S	                 995
IMAP	        143	            IMAPS	                 993

Considering the case of HTTP. Initially, to retrieve a web page over HTTP, the web browser would need at least perform the following two steps:
1. Establish a TCP connection with the remote web server
2. Send HTTP requests to the web server, such as GET and POST requests.

HTTPS requires an additional step to encrypt the traffic. The new step takes place after establishing a TCP connection and before sending HTTP requests. This extra step can be inferred from the ISO/OSI model in the image presented earlier. 
Consequently, HTTPS requires at least the following three steps:
1. Establish a TCP connection
2. Establish SSL/TLS connection
3. Send HTTP requests to the webserver

After establishing a TCP connection with the server, the client establishes an SSL/TLS connection, as shown in the figure above. 
The terms might look complicated depending on your knowledge of cryptography, but we can simplify the four steps as:
1. The client sends a ClientHello to the server to indicate its capabilities, such as supported algorithms.
2. The server responds with a ServerHello, indicating the selected connection parameters. The server provides its certificate if server authentication is required. The certificate is a digital file to identify itself; it is usually digitally signed by a third party. Moreover, it might send additional information necessary to generate the master key, in its ServerKeyExchange message, before sending the ServerHelloDone message to indicate that it is done with the negotiation.
3. The client responds with a ClientKeyExchange, which contains additional information required to generate the master key. Furthermore, it switches to use encryption and informs the server using the ChangeCipherSpec message.
4. The server switches to use encryption as well and informs the client in the ChangeCipherSpec message.

Question 5: DNS can also be secured using TLS. What is the three-letter acronym of the DNS protocol that uses TLS?
Answer: DoT  


Secure Shell (SSH)

Secure Shell (SSH) was created to provide a secure way for remote system administration. In other words, it lets you securely connect to another system over the network and execute commands on the remote system. 
Put simply, the “S” in SSH stands for secure, which can be summarized simply as:
1. You can confirm the identity of the remote server
2. Exchanged messages are encrypted and can only be decrypted by the intended recipient
3. Both sides can detect any modification in the messages

The above three points are ensured by cryptography. In more technical terms, they are part of confidentiality and integrity, made possible through the proper use of different encryption algorithms.

To use SSH, you need an SSH server and an SSH client. The SSH server listens on port 22 by default. 
The SSH client can authenticate using:
1. A username and a password
2. A private and public key (after the SSH server is configured to recognize the corresponding public key)

Note: if this is the first time we connect to this system, we will need to confirm the fingerprint of the SSH server’s public key to avoid man-in-the-middle (MITM) attacks.

We can use SSH to transfer files using SCP (Secure Copy Protocol) based on the SSH protocol. 
1. An example of the syntax is as follows: scp mark@MACHINE_IP:/home/mark/archive.tar.gz ~. This command will copy a file named archive.tar.gz from the remote system located in the /home/mark directory to ~, i.e., the root of the home directory of the currently logged-in user.
2. Another example syntax is scp backup.tar.bz2 mark@MACHINE_IP:/home/mark/. This command will copy the file backup.tar.bz2 from the local system to the directory /home/mark/ on the remote system.

FTP could be secured using SSL/TLS by using the FTPS protocol which uses port 990. It is worth mentioning that FTP can also be secured using the SSH protocol which is the SFTP protocol. By default this service listens on port 22, just like SSH.

Question 6: Use SSH to connect to MACHINE_IP as mark with the password XBtc49AB. Using uname -r, find the Kernel release?
Answer: 5.15.0-119-generic

Question 7: Use SSH to download the file book.txt from the remote system. How many KBs did scp display as download size?
Answer: 415

Password Attack

Authentication, or proving your identity, can be achieved through one of the following, or a combination of two:
1. Something you know, such as password and PIN code.
2. Something you have, such as a SIM card, RFID card, and USB dongle.
3. Something you are, such as fingerprint and iris.

Based on the 150 million usernames and passwords leaked from the Adobe breach in 2013, the top ten passwords are:
1. 123456
2. 123456789
3. password
4. adobe123
5. 12345678
6. qwerty
7. 1234567
8. 111111
9. photoshop
10. 123123

Attacks against passwords are usually carried out by:
1. Password Guessing: Guessing a password requires some knowledge of the target, such as their pet’s name and birth year.
2. Dictionary Attack: This approach expands on password guessing and attempts to include all valid words in a dictionary or a wordlist.
3. Brute Force Attack: This attack is the most exhaustive and time-consuming where an attacker can go as far as trying all possible character combinations, which grows fast (exponential growth with the number of characters).

Let’s focus on dictionary attacks. 
Over time, hackers have compiled list after list containing leaked passwords from data breaches. One example is RockYou’s list of breached passwords, which you can find on the AttackBox at /usr/share/wordlists/rockyou.txt. The choice of the word list should depend on your knowledge of the target. For instance, a French user might use a French word instead of an English one. Consequently, a French word list might be more promising.

We want an automated way to try the common passwords or the entries from a word list; here comes THC Hydra. Hydra supports many protocols, including FTP, POP3, IMAP, SMTP, SSH, and all methods related to HTTP.
 The general command-line syntax is: hydra -l username -P wordlist.txt server service where we specify the following options:
1. -l username: -l should precede the username, i.e. the login name of the target.
2. -P wordlist.txt: -P precedes the wordlist.txt file, which is a text file containing the list of passwords you want to try with the provided username.
3. server is the hostname or IP address of the target server.
4. service indicates the service which you are trying to launch the dictionary attack.

Consider the following concrete examples:
1. hydra -l mark -P /usr/share/wordlists/rockyou.txt MACHINE_IP ftp will use mark as the username as it iterates over the provided passwords against the FTP server.
2. hydra -l mark -P /usr/share/wordlists/rockyou.txt ftp://MACHINE_IP is identical to the previous example. MACHINE_IP ftp is the same as ftp://MACHINE_IP.
3. hydra -l frank -P /usr/share/wordlists/rockyou.txt MACHINE_IP ssh will use frank as the user name as it tries to login via SSH using the different passwords.

There are some extra optional arguments that you can add:
1. -s PORT to specify a non-default port for the service in question.
2. -V or -vV, for verbose, makes Hydra show the username and password combinations that are being tried. This verbosity is very convenient to see the progress, especially if you are still not confident of your command-line syntax.
3. -t n where n is the number of parallel connections to the target. -t 16 will create 16 threads used to connect to the target.
4. -d, for debugging, to get more detailed information about what’s going on. The debugging output can save you much frustration; for instance, if Hydra tries to connect to a closed port and timing out, -d will reveal this right away.

Once the password is found, you can issue CTRL-C to end the process.

Note: In TryHackMe tasks, we expect any attack to finish within less than five minutes; however, the attack would usually take longer in real-life scenarios. Options for verbosity or debugging can be pretty helpful if you want Hydra to update you about its progress.

In summary, attacks against login systems can be carried out efficiently using a tool, such as THC Hydra combined with a suitable word list. Mitigation against such attacks can be sophisticated and depends on the target system. 
A few of the approaches include:
1. Password Policy: Enforces minimum complexity constraints on the passwords set by the user.
2. Account Lockout: Locks the account after a certain number of failed attempts.
3. Throttling Authentication Attempts: Delays the response to a login attempt. A couple of seconds of delay is tolerable for someone who knows the password, but they can severely hinder automated tools.
4. Using CAPTCHA: Requires solving a question difficult for machines. It works well if the login page is via a graphical user interface (GUI). (Note that CAPTCHA stands for Completely Automated Public Turing test to tell Computers and Humans Apart.)
5. Requiring the use of a public certificate for authentication. This approach works well with SSH, for instance.
6. Two-Factor Authentication: Ask the user to provide a code available via other means, such as email, smartphone app or SMS.
7. There are many other approaches that are more sophisticated or might require some established knowledge about the user, such as IP-based geolocation.

Note: Using a combination of the above approaches is an excellent approach to protect against password attacks.

Question 8: We learned that one of the email accounts is lazie. What is the password used to access the IMAP service on <IP_Address>?
Answer: butterfly

Summary

This room covered various protocols, their usage, and how they work under the hood. 
Three common attacks are:
1. Sniffing Attack
2. MITM Attack
3. Password Attack

For each of the above, we focused both on the attack details and the mitigation steps.

Many other attacks can be conducted against specific servers and protocols. We will provide a list of some related modules.
1. Vulnerability Research: This module provides more information about vulnerabilities and exploits.
2. Metasploit: This module trains you on how to use Metasploit to exploit target systems.
3. Burp Suite: This module teaches you how to use Burp Suite to intercept HTTP traffic and launch attacks related to the web.

It is good to remember the default port number for common protocols. For convenience, the services we covered are listed in the following table sorted by alphabetical order.
Protocol	    TCP Port	    Application(s)	                    Data Security
FTP	               21	        File Transfer	                    Cleartext
FTPS	          990	        File Transfer	                    Encrypted
HTTP	           80	        Worldwide Web	                    Cleartext
HTTPS	          443	        Worldwide Web	                    Encrypted
IMAP	          143	        Email (MDA)	                        Cleartext
IMAPS	          993	        Email (MDA)	                        Encrypted
POP3	          110	        Email (MDA)	                        Cleartext
POP3S	          995	        Email (MDA)	                        Encrypted
SFTP	           22	        File Transfer	                    Encrypted
SSH	               22	        Remote Access and File Transfer	    Encrypted
SMTP	           25	        Email (MTA)	                        Cleartext
SMTPS	          465	        Email (MTA)	                        Encrypted
Telnet	           23	        Remote Access	                    Cleartext

Hydra remains a very efficient tool that you can launch from the terminal to try the different passwords. We summarize its main options in the following table.

Option	                    Explanation
-l username	                Provide the login name
-P WordList.txt	            Specify the password list to use
server service	            Set the server address and service to attack
-s PORT	                    Use in case of non-default service port number
-V or -vV	                Show the username and password combinations being tried
-d	                        Display debugging output if the verbose output is not helping

